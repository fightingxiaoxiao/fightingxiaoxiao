<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux工作站指南</title>
      <link href="2021/05/22/2021-5-linux-gong-zuo-zhan-zhi-nan/"/>
      <url>2021/05/22/2021-5-linux-gong-zuo-zhan-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从2021年5月20日起，工作站的操作系统从Windows 10迁移至Ubuntu 20.04。Linux作为最流行的服务器系统，广泛应用于HPC集群等高性能计算机设备。其主要优势包括：</p><p><strong>1. 可靠的稳健性。</strong>Linux的操作基于Linux shell，这意味着所有对Linux的操作实际上由命令行完成，包括桌面图形在内的所有上层设施都基于底层的脚本，这确保Linux在图形崩溃时仍能使用底层的tty执行命令行或恢复。大部分7×24小时开启的服务器均采用Linux系统。</p><p><strong>2. 良好的性能。</strong>Linux系统的内存占用普遍低于Windows,这得益于没有针对Linux的流氓软件，以及Linux良好的进程管理。由于采用ext4格式硬盘，Linux在小文件IO的性能方便也具备显著优势。</p><p><strong>3. 强大的开源生态链。</strong>在计算机仿真领域，几乎所有的开源程序都更偏向GNU/Linux生态。事实上，包括ANSYS,LSTC在内的商软在测试性能时也偏向使用Linux(比如RHEL)。</p><p><strong>4. 便利的网络配置。</strong>Linux几乎是组建计算机集群的唯一选择。</p><p><strong>5. 以上都是编的。</strong>主要原因是逼格够高。</p><h2 id="工作站配置介绍"><a href="#工作站配置介绍" class="headerlink" title="工作站配置介绍"></a>工作站配置介绍</h2><h2 id="系统的基本操作"><a href="#系统的基本操作" class="headerlink" title="系统的基本操作"></a>系统的基本操作</h2><p>本系统安装了Gnome桌面，也就是你们现在看到的这个图形界面。尽管很多软件像win10一样能用双击的方式打开，但这并不是一个很好的选择。因为使用这种方式打开的软件默认采用后台运行的方式，当后台运行的软件报错时，我们可能需要进入任务管理器才能强制中断并退出。Linux系统更推荐使用<strong>终端</strong>(<strong>Terminal</strong>)直接输入<strong>命令行</strong>进行操作。使用<code>Ctrl</code>+<code>Alt</code>+<code>T</code>或在资源管理器的空白位置<code>右键</code>-&gt;<code>Open in Terminal</code>可以快速打开一个终端窗口。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>请务必在运行程序时注意终端命令的执行路径！错误的路径很可能会覆盖其他人的工作成果！在终端中执行<code>pwd</code>命令可以快速查看当前路径。</p></li><li><p>在运行大规模的计算时，请注意系统资源的占用情况！在终端中执行<code>top</code>或<code>htop</code>可以快速查看当前的CPU和内存使用情况。</p></li></ul><h2 id="主要CAE软件的使用方法"><a href="#主要CAE软件的使用方法" class="headerlink" title="主要CAE软件的使用方法"></a>主要CAE软件的使用方法</h2><h3 id="ANSYS-Fluent"><a href="#ANSYS-Fluent" class="headerlink" title="ANSYS Fluent"></a>ANSYS Fluent</h3><h3 id="ANSYS-LS-DYNA"><a href="#ANSYS-LS-DYNA" class="headerlink" title="ANSYS LS-DYNA"></a>ANSYS LS-DYNA</h3><h5 id="1-配置项目路径"><a href="#1-配置项目路径" class="headerlink" title="1. 配置项目路径"></a>1. 配置项目路径</h5><p>将你想要执行的k文件放到你的工作路径，打开终端，进入你的工作路径，例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /media/workstationData/lsdyna_example/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，如果你在资源管理器界面，在当前文件目录下采用右键的方式打开Terminal的话，Terminal默认的路径就会在当前路径下，可以执行<code>pwd</code>命令核实。</p><h5 id="2-执行LS-DYNA求解器"><a href="#2-执行LS-DYNA求解器" class="headerlink" title="2. 执行LS-DYNA求解器"></a>2. 执行LS-DYNA求解器</h5><p>LS-DYNA的求解器命令为<code>lsdyna</code>，其通过不同的可选命令来实现求解的设置，如：</p><p><code>-mpp</code> 使用MPP求解器，不附加该词条则使用SMP求解器</p><p><code>-np X</code> 使用X个计算节点启动MPP求解器</p><p><code>-dp</code> 使用双精度求解器，不附加该词条则使用单精度求解器</p><p><code>i=xxx.k</code> 指定需要执行的k文件，应确保k文件位于当前路径</p><p><code>memory=xxxxxx</code> 指定求解器占用内存，默认单位是字节，一般情况下不需要使用</p><p><code>ncpus=X</code> 使用X个线程启动SMP求解器。需要注意，按照官方文档的说明，当并行线程数大于5时，SMP的并行加速比可能会显著下降，此时更推荐使用MPP求解器。</p><p>以下给出一些实际运行案例：</p><ul><li>使用<code>1</code>个线程运行<code>单精度</code> <code>SMP</code>求解器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsdyna <span class="token assign-left variable">i</span><span class="token operator">=</span>test.k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>4</code>个并行节点运行<code>单精度</code> <code>MPP</code>求解器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsdyna -mpp -np <span class="token number">4</span> <span class="token assign-left variable">i</span><span class="token operator">=</span>test.k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>4</code>个线程运行<code>双精度</code> <code>SMP</code>求解器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsdyna -dp <span class="token assign-left variable">i</span><span class="token operator">=</span>test.k <span class="token assign-left variable">ncpus</span><span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>8</code>个并行节点运行<code>双精度</code> <code>MPP</code>求解器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsdyna -mpp -dp -np <span class="token number">8</span> <span class="token assign-left variable">i</span><span class="token operator">=</span>test.k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>8</code>个并行节点运行<code>双精度</code> <code>MPP</code>求解器，并指定2000M内存</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsdyna -mpp -dp -np <span class="token number">8</span> <span class="token assign-left variable">i</span><span class="token operator">=</span>test.k <span class="token assign-left variable">memory</span><span class="token operator">=</span>2000M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsdyna -mpp -dp -np <span class="token number">8</span> <span class="token assign-left variable">i</span><span class="token operator">=</span>test.k <span class="token assign-left variable">memory</span><span class="token operator">=</span><span class="token number">2000000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-使用LS-PrePost后处理"><a href="#3-使用LS-PrePost后处理" class="headerlink" title="3. 使用LS-PrePost后处理"></a>3. 使用LS-PrePost后处理</h5><p>在当前路径执行<code>lspp48</code>即可，后续操作和Windows下一致。</p><h5 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h5><blockquote><p>重启工作站后MPP程序卡住</p></blockquote><p>这个问题可能是由于INTELMPI没有获取足够的权限导致的，可以尝试执行以下命令（<strong>如不了解管理员权限，请事先告知我！</strong>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /proc/sys/kernel/yama/ptrace_scope<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Abaqus"><a href="#Abaqus" class="headerlink" title="Abaqus"></a>Abaqus</h3><h3 id="OpenFOAM"><a href="#OpenFOAM" class="headerlink" title="OpenFOAM"></a>OpenFOAM</h3>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CAE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CFD-DPM的基本原理</title>
      <link href="2021/03/14/2021-3-cfd-dpm-de-ji-ben-yuan-li/"/>
      <url>2021/03/14/2021-3-cfd-dpm-de-ji-ben-yuan-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CFD </tag>
            
            <tag> DPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大气边界层的数值方法实现：以OpenFOAM为例（一）</title>
      <link href="2020/12/13/2020-12-14-da-qi-bian-jie-ceng/"/>
      <url>2020/12/13/2020-12-14-da-qi-bian-jie-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>地球表面通过地面的摩擦对空气水平运动产生阻力，从而使气流速度减慢，该阻力对气流的作用随高度的增加而减弱。当超过特定高度 $(z_G)$ 时,这一作用即可被忽视，气流将沿等压线以梯度风速流动，则将此高度以下的区域称作<strong>大气边界层</strong>（<strong>Atmosphere Boundary Layer, ABL</strong>）。一般的，大气边界层内近地层的气流是湍流，湍流掺混使地表阻力的影响扩展到大气边界层的整个区域。而在边界层高度以上的自由大气中的风流动属于层流。<a href="#refer-anchor-1">[1]</a></p><h2 id="风速剖面"><a href="#风速剖面" class="headerlink" title="风速剖面"></a>风速剖面</h2><h3 id="对数律"><a href="#对数律" class="headerlink" title="对数律"></a>对数律</h3><p>平均风剖面是微气象学研究风速变化的一种主要方法。目前，气象学家认为用对数律表示大气底层强风风速廓线比较理想，其表达式为<a href="#refer-anchor-2">[2]</a><a href="#refer-anchor-3">[3]</a><br>$$u = \frac{u^*}{\kappa} \ln \left( \frac{z - d + z_0}{z_0} \right)\tag{1}$$<br>式中</p><p>$u$ — 高度 $z$ 处的平均风速（m/s）</p><p>$u^*$ — 剪切风速（m/s）</p><p>$\kappa$ — 卡曼常数，一般取0.4</p><p>$d$ — 零平均位移（m）</p><p>$z_0$ — 粗糙高度（m），取值可见下表<a href="#refer-anchor-1">[1]</a></p><table><thead><tr><th><strong>地面类型</strong></th><th><strong>$z_0/\rm{m}$</strong></th><th><strong>地面类型</strong></th><th><strong>$z_0/\rm{m}$</strong></th></tr></thead><tbody><tr><td>砂地</td><td>0.0001~0.001</td><td>矮棕榈</td><td>0.10~0.30</td></tr><tr><td>雪地</td><td>0.001~0.006</td><td>松树林</td><td>0.90~1.00</td></tr><tr><td>割过的草地（~0.01m）</td><td>0.001~0.01</td><td>稀疏建成市郊</td><td>0.20~0.40</td></tr><tr><td>矮草地、空旷草原</td><td>0.01~0.04</td><td>密集建成市郊、市区</td><td>0.80~1.20</td></tr><tr><td>休耕地</td><td>0.02~0.03</td><td>大城市中心</td><td>2.00~3.00</td></tr><tr><td>高草地</td><td>0.04~0.10</td><td></td><td></td></tr></tbody></table><p>城市地区的修正下次再写。</p><h3 id="指数律"><a href="#指数律" class="headerlink" title="指数律"></a>指数律</h3><p>&emsp;&emsp;懒得写了。</p><h2 id="湍流特征"><a href="#湍流特征" class="headerlink" title="湍流特征"></a>湍流特征</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a class="target-fix" id="refer-anchor-1"></a></p><p>[1] 黄本才. 结构抗风分析原理及应用[M]. 同济大学出版社, 2001.</p><p><a class="target-fix" id="refer-anchor-2"></a></p><p>[2] Yang Y, Gu M, Chen S, et al. New inflow boundary conditions for modelling the neutral equilibrium atmospheric boundary layer in computational wind engineering[J]. Journal of Wind Engineering and Industrial Aerodynamics, 2009, 97(2): 88-95.</p><p><a class="target-fix" id="refer-anchor-3"></a></p><p>[3] Richards P J, Hoxey R P. Appropriate boundary conditions for computational wind engineering models using the k-ε turbulence model[M]//Computational Wind Engineering 1. Elsevier, 1993: 145-153.</p>]]></content>
      
      
      <categories>
          
          <category> CFD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CFD </tag>
            
            <tag> OpenFOAM </tag>
            
            <tag> Wind Engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenFOAM初探（一）</title>
      <link href="2020/02/14/2020-2-openfoam-de-jie-shao-yu-an-zhuang/"/>
      <url>2020/02/14/2020-2-openfoam-de-jie-shao-yu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者早年的工作主要在win10平台进行，使用过诸如CFX、Fluent等商业软件，后续论文工作主要操练的是Fluent UDF。诚然，Fluent依托UDF在可操作性上已经远超其余商业CFD软件(待考证)，但是其缺陷依然明显：1, 界面操作繁琐，对于一些参数化的研究工作，很难通过脚本实现(GUI依赖版本，TUI懒得学)；2, 新功能的整合程度参差不齐，以笔者常用的DPM为例，功能限制较多，BUG不少…；3, 很难修改顶层求解器，很多中间步骤需要手工；4, 安装包太大，正版太贵。<br>OpenFOAM是一款流行的开源CFD工具箱，最初萌生体验的想法主要还是觉得自己的代码水平有些上路了(自我感觉)，此外觉得用命令行和脚本操作很有一种Geek的感觉～</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>OpenFOAM主要有两大分支，一是<a href="https://www.openfoam.org/">基金会版(.org)</a>，版本号为OF6,7,8…，似乎是由帝国理工维护，从”血统”上讲更纯；二是<a href="https://www.openfoam.com/">ESI版(.com)</a>，版本号为v1912,v2006,v2012…(前两位数字代表年份，后两位数字代表月份，第一次接触乍一看还以为这版本好几年没更新了)，由ESI Group维护，有那么一点点商业化的感觉。通过使用OpenFOAM 7/8/v2006/v2012这四个版本, 我大致了解了一下这两个分支的区别：</p><ul><li><strong>手册</strong> <a href="https://openfoam.com/documentation/guides/latest/doc/">ESI版的手册</a>要远比基金会版的全面，后者基本就是看源码。当然总体来说OpenFOAM是我用过的大型开源软件里文档做的最差的，大概是为了培训收入吧。</li><li><strong>算例</strong> ESI版自带的Tutorials要比基金会版的多，比如大气边界层的建模，基金会版似乎没有。</li><li><strong>后处理</strong> ESI版DPM类的求解器输出的lagrangian粒子场能够通过外部安装的Paraview读取，而基金会版的只能通过在ThirdParty中编译的Paraview打开，而这个版本的显示性能较差。同时，如果使用的是WSL1这种没有显示接口的系统，使用Windows下的Paraview做颗粒后处理的话，ESI版是唯一的选择。</li><li><strong>求解器</strong> 基金会版似乎对一些求解器做了整合，比如将动网格功能合并进了一些原始的求解器，这一点比较友好。求解器功能上两者似乎差异不大。</li><li><strong>第三方包</strong> ESI版支持更多的第三方内容，比如比较知名的科学计算套件Petsc(很高端，很想学，但没空)、基于一些奇妙方法的多相流求解器OpenQBMM(但是算例好像跑不了…)、优化大规模IO的adios(听着很妙但没钱玩超算)…但是鲁迅说过，我可以不用，但它必须要有。</li><li><strong>平台支持</strong> 参考基金会官网，OpenFOAM主要面向Linux，同时也一定程度支持Windows 10和macOS。基金会提供了面向Linux的源码包，以及Ubuntu等主流Linux发行版的二进制包。在Win10上安装OpenFOAM(不包括虚拟机)需要安装Linux子系统，即WSL。而ESI版提供基于MSYS的OpenCFD,能在Windows上做到开箱即用(似乎就是个docker?)，针对不同发行版的二进制包也更多。不过平台的支持程度并不是很关键，因为想要好好学习OpenFOAM还是得从编译源码包开始，使用原生Linux无论从性能和兼容性来看都是最佳选择，WSL可以作为Windows系统上的备胎。否则OpenFOAM对比Fluent似乎没有明显优势。</li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="Arch-Manjaro"><a href="#Arch-Manjaro" class="headerlink" title="Arch/Manjaro"></a>Arch/Manjaro</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S gcc flex cmake <span class="token function">git</span> openmpi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential flex bison cmake zlib1g-dev libboost-system-dev libboost-thread-dev libopenmpi-dev openmpi-bin gnuplot libreadline-dev libncurses-dev libxt-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qt4-dev-tools libqt4-dev libqt4-opengl-dev freeglut3-dev libqtwebkit-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CFD </tag>
            
            <tag> OpenFOAM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020新春快乐！</title>
      <link href="2020/02/13/2020-02-2020-happy-new-year/"/>
      <url>2020/02/13/2020-02-2020-happy-new-year/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一篇博客，写于新冠病毒肆虐的2020年新春。曾经也有过搭建个人网站的念头，但苦于学业繁忙一直不能如愿。如今踏入博一，课业轻了，第一篇SCI也已投出，自觉应该静下心来整理整理一些囫囵吞枣的知识，好好思索一下自己的科研计划。于是这个博客就华丽地诞生了！<br>往后，包括自己对所在科研领域的一些小小见解、平日学习的一些笔记都会逐步整理并上传。主要目的是便于对自己知识体系的整理和重用，也希望漂亮的博客能给予自己一个正反馈。如果你是偶然路过的同行，也十分欢迎互相交流学习。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
